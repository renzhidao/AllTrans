name: Build Release APK

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Fix all incomplete XML files
      run: |
        echo "=== 开始修复所有XML文件 ==="
        
        # 函数：检查并修复XML文件
        check_and_fix_xml() {
            local file="$1"
            local expected_end="$2"
            
            if [ -f "$file" ]; then
                if ! tail -1 "$file" | grep -q "$expected_end"; then
                    echo "修复 $file - 添加 $expected_end"
                    echo "$expected_end" >> "$file"
                else
                    echo "$file 已经有正确的结束标签"
                fi
            fi
        }
        
        # 修复已知的问题文件
        check_and_fix_xml "app/src/main/res/layout/apps_list.xml" "</LinearLayout>"
        check_and_fix_xml "app/src/main/res/values/strings.xml" "</resources>"
        
        # 检查所有layout文件
        for file in app/src/main/res/layout/*.xml; do
            if [ -f "$file" ]; then
                # 获取第一个元素标签
                first_tag=$(grep -m1 "^<[^?!]" "$file" | sed 's/<KATEX_INLINE_OPEN[^ >\/]*KATEX_INLINE_CLOSE.*/\1/')
                if [ ! -z "$first_tag" ]; then
                    check_and_fix_xml "$file" "</$first_tag>"
                fi
            fi
        done
        
        # 检查所有values文件
        for file in app/src/main/res/values/*.xml; do
            if [ -f "$file" ]; then
                check_and_fix_xml "$file" "</resources>"
            fi
        done
        
        # 重新创建 keys.xml（如果有问题）
        if [ -f "app/src/main/res/values/keys.xml" ]; then
            echo '<?xml version="1.0" encoding="utf-8"?>' > app/src/main/res/values/keys.xml
            echo '<resources>' >> app/src/main/res/values/keys.xml
            echo '</resources>' >> app/src/main/res/values/keys.xml
        fi
        
        echo "=== XML文件修复完成 ==="
    
    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup build environment
      run: |
        keytool -genkey -v -keystore release.keystore -alias key -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=Android,O=Android,C=US"
        
        echo "RELEASE_STORE_FILE=../release.keystore" >> gradle.properties
        echo "RELEASE_STORE_PASSWORD=android" >> gradle.properties
        echo "RELEASE_KEY_ALIAS=key" >> gradle.properties
        echo "RELEASE_KEY_PASSWORD=android" >> gradle.properties
        echo "android.useAndroidX=true" >> gradle.properties
        echo "android.enableJetifier=true" >> gradle.properties
        
        echo '{"project_info":{"project_number":"1","project_id":"d"},"client":[{"client_info":{"mobilesdk_app_id":"1:1:android:1","android_client_info":{"package_name":"akhil.alltrans"}},"api_key":[{"current_key":"x"}]}]}' > app/google-services.json
        
        chmod +x gradlew
    
    - name: Build Release
      run: ./gradlew assembleRelease
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: alltrans-release
        path: app/build/outputs/apk/release/app-release.apk
