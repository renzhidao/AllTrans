name: Build and Fix Release APK

on:
  push:
  workflow_dispatch:

jobs:
  build-and-fix:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Tools
      run: sudo apt-get update && sudo apt-get install -y libxml2-utils tree  # 用于xmllint和tree
    
    - name: Comprehensive Diagnosis and Fix
      run: |
        #!/bin/bash
        set -e
        
        echo "=== 开始错误完整性检查和修复 ==="
        
        # 定义关键路径
        APPS_LIST_XML="app/src/main/res/layout/apps_list.xml"
        STRINGS_XML="app/src/main/res/values/strings.xml"
        KEYS_XML="app/src/main/res/values/keys.xml"
        ICON_DIR_V4="app/src/main/res/drawable-anydpi-v4"
        ICON_DIR="app/src/main/res/drawable-anydpi"
        ICON_FILE="ic_list_icon_placeholder.xml"
        ICON_PATH_V4="$ICON_DIR_V4/$ICON_FILE"
        ICON_PATH="$ICON_DIR/$ICON_FILE"
        
        # 步骤1: 检查并修复重复资源
        echo "检查重复资源..."
        if [ -f "$ICON_PATH" ] && [ -f "$ICON_PATH_V4" ]; then
            echo "检测到重复: $ICON_PATH 和 $ICON_PATH_V4"
            echo "删除旧版目录中的文件: $ICON_PATH"
            rm -f "$ICON_PATH"
            echo "重复资源已修复"
        elif [ -f "$ICON_PATH" ]; then
            echo "移动 $ICON_PATH 到正确目录 $ICON_DIR_V4"
            mkdir -p "$ICON_DIR_V4"
            mv "$ICON_PATH" "$ICON_PATH_V4"
        fi
        
        # 步骤2: 检查并重写/修复 ic_list_icon_placeholder.xml
        mkdir -p "$ICON_DIR_V4"
        if [ ! -f "$ICON_PATH_V4" ] || ! xmllint --noout "$ICON_PATH_V4" 2>/dev/null; then
            echo "修复或创建 $ICON_PATH_V4"
            cat > "$ICON_PATH_V4" << 'ICON_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <vector xmlns:android="http://schemas.android.com/apk/res/android"
            android:width="24dp"
            android:height="24dp"
            android:viewportWidth="24"
            android:viewportHeight="24"
            android:tint="?attr/colorOnSurface">
            <path
                android:fillColor="@android:color/white"
                android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM13,17h-2v-6h2v6zM13,9h-2L11,7h2v2z"/>
        </vector>
        ICON_EOF
            echo "已修复: $ICON_PATH_V4"
        fi
        
        # 步骤3: 检查并修复 apps_list.xml (处理Prolog错误和不完整)
        mkdir -p "$(dirname "$APPS_LIST_XML")"
        if [ ! -f "$APPS_LIST_XML" ] || head -n1 "$APPS_LIST_XML" | grep -q '^[^<]'; then
            echo "检测到 $APPS_LIST_XML Prolog错误或缺失，创建/重置文件"
            cat > "$APPS_LIST_XML" << 'APPS_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">
            <!-- 添加您的内容这里 -->
        </LinearLayout>
        APPS_EOF
        elif ! grep -q "</LinearLayout>" "$APPS_LIST_XML" 2>/dev/null; then
            echo "</LinearLayout>" >> "$APPS_LIST_XML"
            echo "已添加结束标签到 $APPS_LIST_XML"
        fi
        
        # 步骤4: 检查并修复 strings.xml
        if ! grep -q "</resources>" "$STRINGS_XML" 2>/dev/null; then
            echo "</resources>" >> "$STRINGS_XML"
            echo "已修复: $STRINGS_XML"
        fi
        
        # 步骤5: 重写 keys.xml
        mkdir -p "$(dirname "$KEYS_XML")"
        cat > "$KEYS_XML" << 'KEYS_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
        </resources>
        KEYS_EOF
        echo "已重写: $KEYS_XML"
        
        # 步骤6: 验证所有XML语法
        echo "验证XML语法..."
        for file in "$APPS_LIST_XML" "$STRINGS_XML" "$KEYS_XML" "$ICON_PATH_V4"; do
            if [ -f "$file" ]; then
                xmllint --noout "$file" && echo "$file: 有效" || echo "警告: $file 有语法错误"
            fi
        done
        
        # 步骤7: 清理备份和无效文件
        find app/src/main/res -name "*.bak" -delete 2>/dev/null || true
        echo "清理完成"
        
        echo "=== 检查和修复完成。诊断总结: ==="
        ls -l app/src/main/res/layout/ app/src/main/res/values/ app/src/main/res/drawable-anydpi*/ 2>/dev/null || echo "无文件"
    
    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup build environment
      run: |
        # 添加gradle.properties（增加内存，避免Daemon问题）
        echo "android.useAndroidX=true" >> gradle.properties
        echo "android.enableJetifier=true" >> gradle.properties
        echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError" >> gradle.properties  # 进一步增加内存
        echo "org.gradle.daemon=true" >> gradle.properties  # 强制启用Daemon
        
        # 生成google-services.json
        echo '{"project_info":{"project_number":"1","project_id":"d"},"client":[{"client_info":{"mobilesdk_app_id":"1:1:android:1","android_client_info":{"package_name":"akhil.alltrans"}},"api_key":[{"current_key":"x"}]}]}' > app/google-services.json
        
        chmod +x gradlew
    
    - name: Disable Signing and Overwrite Build Gradle
      run: |
        APP_BUILD_GRADLE="app/build.gradle"
        # 备份原文件
        cp "$APP_BUILD_GRADLE" "$APP_BUILD_GRADLE.bak"
        
        # 覆盖为预定义的修复版 build.gradle（基于您的原文件，移除签名）
        cat > "$APP_BUILD_GRADLE" << 'BUILD_EOF'
/*
 * Copyright 2017 Akhil Kedia
 * This file is part of AllTrans.
 *
 * AllTrans is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AllTrans is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AllTrans. If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'

android {
    compileSdk 33

    defaultConfig {
        applicationId "akhil.alltrans"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 196
        versionName "1.9.6"
        multiDexEnabled true
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig null  // 禁用签名，生成无签名 APK
        }
    }
    namespace 'akhil.alltrans'
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    compileOnly 'de.robv.android.xposed:api:82:sources'
    compileOnly 'de.robv.android.xposed:api:82'

    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'

    implementation 'com.google.firebase:firebase-analytics:21.3.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.4.0'
    implementation 'com.google.mlkit:translate:17.0.1'
    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.codemybrainsout.rating:ratingdialog:1.0.8'
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

afterEvaluate {
    installDebug.doLast {
        // 您的原任务
    }
}

task updateVirtualXposedAPP(type: Exec) {
    def pkg = android.defaultConfig.applicationId
    commandLine android.adbExecutable, 'shell', 'am', 'broadcast', '-a', 'io.va.exposed.CMD', '-e', 'cmd', 'update', '-e', 'pkg', pkg
}

task clearLog(type: Exec) {
    commandLine android.adbExecutable, 'logcat', '-c'
}

task rebootVirtualXposedAPP(type: Exec) {
    commandLine android.adbExecutable, 'shell', 'am', 'broadcast', '-a', 'io.va.exposed.CMD', '-e', 'cmd', 'reboot'
}

task launchVirtualXposedAPP(type: Exec) {
    def pkg = "com.megabox.mop" // for example: com.tencent.mm
    commandLine android.adbExecutable, 'shell', 'am', 'broadcast', '-a', 'io.va.exposed.CMD', '-e', 'cmd', 'launch', '-e', 'pkg', pkg
}
BUILD_EOF

        echo "=== 已覆盖 app/build.gradle 为无签名版本 ==="
        cat "$APP_BUILD_GRADLE"
        
        # 验证语法
        echo "=== 验证 build.gradle 语法 ==="
        ./gradlew help --info --debug || (echo "验证失败，回滚" && mv "$APP_BUILD_GRADLE.bak" "$APP_BUILD_GRADLE")
        
        # Daemon 诊断和重启
        echo "=== 停止旧 Daemon 并诊断 ==="
        ./gradlew --stop || true
        ./gradlew --status || true
    
    - name: Clean and Build Unsigned Release
      run: |
        echo "=== 开始清理和构建无签名 Release APK ==="
        ./gradlew clean --debug --stacktrace --info
        ./gradlew assembleRelease --debug --stacktrace --info || ./gradlew assembleDebug --debug --stacktrace --info  # fallback 到 debug 如果 release 失败
    
    - name: Debug Build Outputs
      if: always()
      run: |
        echo "=== 构建输出目录内容（详细诊断） ==="
        tree app/build/ || ls -laR app/build/ || echo "app/build/ 目录不存在"
        echo "=== 所有生成的APK/AAB文件 ==="
        find . -name "*.apk" -o -name "*.aab" -type f -print || echo "无任何APK/AAB文件生成"
        echo "=== Gradle日志摘要（错误/警告） ==="
        find app/build -type f -name "*.txt" -exec grep -i "error\|warning\|failed\|success" {} \; 2>/dev/null || echo "无报告文件"
        # 如果无APK/AAB，强制失败
        if [ $(find . -name "*.apk" -o -name "*.aab" | wc -l) -eq 0 ]; then
          echo "错误: 没有生成任何APK或AAB文件！检查Daemon日志。"
          exit 1
        fi
    
    - name: Upload Unsigned APK or AAB
      uses: actions/upload-artifact@v4
      with:
        name: alltrans-release-unsigned
        path: |
          app/build/outputs/**/*.apk
          app/build/outputs/**/*.aab
    
    - name: Upload Logs (always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          app/build/reports/
          app/build/outputs/
          **/*.log
          gradlew
          app/build.gradle
          app/build.gradle.bak