name: Build and Fix Release APK

on:
  push:
  workflow_dispatch:

jobs:
  build-and-fix:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Tools
      run: sudo apt-get update && sudo apt-get install -y libxml2-utils tree  # 用于xmllint和tree
    
    - name: Comprehensive Diagnosis and Fix
      run: |
        #!/bin/bash
        set -e
        
        echo "=== 开始错误完整性检查和修复 ==="
        
        # 定义关键路径
        APPS_LIST_XML="app/src/main/res/layout/apps_list.xml"
        STRINGS_XML="app/src/main/res/values/strings.xml"
        KEYS_XML="app/src/main/res/values/keys.xml"
        ICON_DIR_V4="app/src/main/res/drawable-anydpi-v4"
        ICON_DIR="app/src/main/res/drawable-anydpi"
        ICON_FILE="ic_list_icon_placeholder.xml"
        ICON_PATH_V4="$ICON_DIR_V4/$ICON_FILE"
        ICON_PATH="$ICON_DIR/$ICON_FILE"
        
        # 步骤1: 检查并修复重复资源
        echo "检查重复资源..."
        if [ -f "$ICON_PATH" ] && [ -f "$ICON_PATH_V4" ]; then
            echo "检测到重复: $ICON_PATH 和 $ICON_PATH_V4"
            echo "删除旧版目录中的文件: $ICON_PATH"
            rm -f "$ICON_PATH"
            echo "重复资源已修复"
        elif [ -f "$ICON_PATH" ]; then
            echo "移动 $ICON_PATH 到正确目录 $ICON_DIR_V4"
            mkdir -p "$ICON_DIR_V4"
            mv "$ICON_PATH" "$ICON_PATH_V4"
        fi
        
        # 步骤2: 检查并重写/修复 ic_list_icon_placeholder.xml
        mkdir -p "$ICON_DIR_V4"
        if [ ! -f "$ICON_PATH_V4" ] || ! xmllint --noout "$ICON_PATH_V4" 2>/dev/null; then
            echo "修复或创建 $ICON_PATH_V4"
            cat > "$ICON_PATH_V4" << 'ICON_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <vector xmlns:android="http://schemas.android.com/apk/res/android"
            android:width="24dp"
            android:height="24dp"
            android:viewportWidth="24"
            android:viewportHeight="24"
            android:tint="?attr/colorOnSurface">
            <path
                android:fillColor="@android:color/white"
                android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM13,17h-2v-6h2v6zM13,9h-2L11,7h2v2z"/>
        </vector>
        ICON_EOF
            echo "已修复: $ICON_PATH_V4"
        fi
        
        # 步骤3: 检查并修复 apps_list.xml (处理Prolog错误和不完整)
        mkdir -p "$(dirname "$APPS_LIST_XML")"
        if [ ! -f "$APPS_LIST_XML" ] || head -n1 "$APPS_LIST_XML" | grep -q '^[^<]'; then
            echo "检测到 $APPS_LIST_XML Prolog错误或缺失，创建/重置文件"
            cat > "$APPS_LIST_XML" << 'APPS_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">
            <!-- 添加您的内容这里 -->
        </LinearLayout>
        APPS_EOF
        elif ! grep -q "</LinearLayout>" "$APPS_LIST_XML" 2>/dev/null; then
            echo "</LinearLayout>" >> "$APPS_LIST_XML"
            echo "已添加结束标签到 $APPS_LIST_XML"
        fi
        
        # 步骤4: 检查并修复 strings.xml
        if ! grep -q "</resources>" "$STRINGS_XML" 2>/dev/null; then
            echo "</resources>" >> "$STRINGS_XML"
            echo "已修复: $STRINGS_XML"
        fi
        
        # 步骤5: 重写 keys.xml
        mkdir -p "$(dirname "$KEYS_XML")"
        cat > "$KEYS_XML" << 'KEYS_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
        </resources>
        KEYS_EOF
        echo "已重写: $KEYS_XML"
        
        # 步骤6: 验证所有XML语法
        echo "验证XML语法..."
        for file in "$APPS_LIST_XML" "$STRINGS_XML" "$KEYS_XML" "$ICON_PATH_V4"; do
            if [ -f "$file" ]; then
                xmllint --noout "$file" && echo "$file: 有效" || echo "警告: $file 有语法错误"
            fi
        done
        
        # 步骤7: 清理备份和无效文件
        find app/src/main/res -name "*.bak" -delete 2>/dev/null || true
        echo "清理完成"
        
        echo "=== 检查和修复完成。诊断总结: ==="
        ls -l app/src/main/res/layout/ app/src/main/res/values/ app/src/main/res/drawable-anydpi*/ 2>/dev/null || echo "无文件"
    
    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup build environment
      run: |
        # 不生成keystore，因为我们禁用签名
        
        # 添加gradle.properties（无签名相关）
        echo "android.useAndroidX=true" >> gradle.properties
        echo "android.enableJetifier=true" >> gradle.properties
        
        # 生成google-services.json
        echo '{"project_info":{"project_number":"1","project_id":"d"},"client":[{"client_info":{"mobilesdk_app_id":"1:1:android:1","android_client_info":{"package_name":"akhil.alltrans"}},"api_key":[{"current_key":"x"}]}]}' > app/google-services.json
        
        chmod +x gradlew
    
    - name: Disable Signing and Fix Resources
      run: |
        # 动态修改 app/build.gradle 来禁用签名
        APP_BUILD_GRADLE="app/build.gradle"
        if [ ! -f "$APP_BUILD_GRADLE" ]; then
          echo "错误: $APP_BUILD_GRADLE 不存在！"
          exit 1
        fi
        
        # 备份原文件
        cp "$APP_BUILD_GRADLE" "$APP_BUILD_GRADLE.bak"
        
        # 移除 defaultConfig 中的 signingConfig
        sed -i '/defaultConfig {/,/}/ s/signingConfig signingConfigs.publish//g' "$APP_BUILD_GRADLE"
        
        # 在 buildTypes release 中添加 signingConfig null（如果没有）
        if ! grep -q "signingConfig null" "$APP_BUILD_GRADLE"; then
          sed -i '/release {/,/}/ a \            signingConfig null  // 禁用签名' "$APP_BUILD_GRADLE"
        fi
        
        # 移除 signingConfigs 块（可选，但简化）
        sed -i '/signingConfigs {/,/}/d' "$APP_BUILD_GRADLE"
        
        echo "=== 修改后的 app/build.gradle 内容 ==="
        cat "$APP_BUILD_GRADLE"
        
        # 诊断资源冲突（列出潜在error资源）
        echo "=== 诊断资源文件 ==="
        find app/src/main/res -name "*error*" -type f -print || echo "无error相关资源"
        
        # 如果需要，临时移除冲突资源（例如，error_icon，如果存在）
        # find app/src/main/res -name "*error_icon*" -delete || true  # 取消注释如果需要强制移除
        
        echo "=== Gradle tasks 列表（诊断可用任务） ==="
        ./gradlew tasks --all --info
    
    - name: Clean and Build Unsigned Release
      run: |
        echo "=== 开始清理和构建无签名 Release APK ==="
        ./gradlew clean --info --stacktrace
        ./gradlew assembleRelease --info --stacktrace  # 如果失败，工作流停止
    
    - name: Debug Build Outputs
      if: always()
      run: |
        echo "=== 构建输出目录内容（详细诊断） ==="
        tree app/build/ || ls -laR app/build/ || echo "app/build/ 目录不存在"
        echo "=== 所有生成的APK/AAB文件 ==="
        find . -name "*.apk" -o -name "*.aab" -type f -print || echo "无任何APK/AAB文件生成"
        echo "=== Gradle日志摘要（错误/警告） ==="
        find app/build -type f -name "*.txt" -exec grep -i "error\|warning\|failed\|success" {} \; 2>/dev/null || echo "无报告文件"
        # 如果无APK/AAB，强制失败
        if [ $(find . -name "*.apk" -o -name "*.aab" | wc -l) -eq 0 ]; then
          echo "错误: 没有生成任何APK或AAB文件！请检查资源冲突或依赖版本。"
          exit 1
        fi
    
    - name: Upload Unsigned APK or AAB
      uses: actions/upload-artifact@v4
      with:
        name: alltrans-release-unsigned
        path: |
          app/build/outputs/**/*.apk
          app/build/outputs/**/*.aab
    
    - name: Upload Logs (always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          app/build/reports/
          app/build/outputs/
          **/*.log
          gradlew
          app/build.gradle
          app/build.gradle.bak